#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
BASEDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
DOTFILESDIR=$(realpath "${BASEDIR}/../..")
PACKAGE_LISTS="${DOTFILESDIR}/package_lists"

sudo -v


update_repo() {
    repourl=$(git -C $2 config --get remote.origin.url 2>/dev/null)
    ret=$?
    if [ $ret -ne 0 ] || [ $repourl != $1 ]; then
        # Not a repo / Wrong URL
        sudo rm -rf $2
        sudo git clone $1 $2
    else
        # Update instead
        sudo git -C $2 reset --hard
        sudo git -C $2 pull
    fi
}


# First handle Python and it's packages.
if [ $(command -v python) ]; then
    sudo python -m ensurepip --upgrade
    sudo -H python -m pip install -r "${PACKAGE_LISTS}/pip"
else
    echo "You are running a system without python installed you dummy!"
fi;


# Now everyone else's packages.
if [ $(command -v apt-get) ]; then
    sudo apt-get install -y $(grep '^.*$' "${PACKAGE_LISTS}/apt" | tr "\n" " ")
elif [ $(command -v pacman) ]; then
    sudo pacman -Sy $(grep '^.*$' "${PACKAGE_LISTS}/pacman" | tr "\n" " ")
fi;


# Finally the git repos.
update_repo https://github.com/ImOutOfAlex/dotfiles.git $DOTFILESDIR
update_repo https://github.com/solarized/xresources.git "${DOTFILESDIR}/themes/solarized/xresources"
update_repo https://github.com/seebi/dircolors-solarized.git "${DOTFILESDIR}/themes/solarized/dircolors"

